@page "/session/{SessionID:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using Contracts.DTO.Session
@using System.Net.Http.Json
@using System.Net.Http.Headers

<h3>Session Details</h3>

@if (session == null)
{
    <p>Loading...</p>
}
else
{
    <p><strong>Circuit:</strong> @session.CircuitName</p>
    <p><strong>Created:</strong> @session.CreatedAt.ToLocalTime().ToString("g")</p>
    <p><strong>Fastest Lap:</strong> @(FormatTime(session.FastestLap))</p>

    <h5>Heats</h5>
    <ul>
        @foreach (var heat in session.Heats.OrderBy(h => h.HeatNumber))
        {
            <li>
                Heat @heat.HeatNumber
                (Fastest: @(FormatTime(heat.FastestLap)))
                <button class="btn btn-sm btn-outline-primary ml-2" @onclick="@(() => ViewHeat(heat.HeatID))">View Heat</button>
            </li>
        }
    </ul>
}

@code {
    [Parameter]
    public int SessionID { get; set; }

    private SessionDetailDTO? session;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"api/session/{SessionID}");
            await AttachJwtAsync(request);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                session = await response.Content.ReadFromJsonAsync<SessionDetailDTO>();
            }
            else
            {
                Console.WriteLine($"⚠️ Failed to load session: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error loading session details: {ex.Message}");
        }
    }

    private void ViewHeat(int heatId)
    {
        Navigation.NavigateTo($"/heat/{heatId}");
    }

    private string FormatTime(TimeSpan? time)
    {
        if (!time.HasValue)
            return "-";

        var t = time.Value;
        if (t.Minutes == 0)
            return $"{t.Seconds}.{t.Milliseconds:D3}";

        return $"{t.Minutes}:{t.Seconds:D2}.{t.Milliseconds:D3}";
    }

    private async Task AttachJwtAsync(HttpRequestMessage request)
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");
        if (!string.IsNullOrEmpty(token))
        {
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
    }
}