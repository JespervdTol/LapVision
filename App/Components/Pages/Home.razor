@page "/home"
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject HttpClient Http
@using System.Text.Json
@using System.Net.Http.Headers
@using Contracts.DTO.GPS
@using Contracts.DTO.Circuit
@using Contracts.DTO.LapTime
@using Microsoft.Maui.ApplicationModel
@using System.Text

<link href="css/home.css" rel="stylesheet" />

<div class="home-container">
    <h1>Welcome back, @Username!</h1>
    <p class="home-sub">You're logged in as <strong>@UserRole</strong></p>

    <button class="btn-start-session" @onclick="ToggleSession">
        @(sessionActive ? "Stop Session" : "Start Session")
    </button>

    @if (UserRole == "Admin")
    {
        <button class="btn btn-outline-success mt-2" @onclick="SetStartLine">📌 Set Start/Finish Line (Current GPS)</button>
        <button class="btn btn-outline-primary mt-2" @onclick="StartLayoutRecording">🎥 Record Track Layout</button>
    }

    <button class="logout-button mt-4" @onclick="Logout">Logout</button>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3">@ErrorMessage</div>
    }

    @if (isTracking)
    {
        <div class="mt-4">
            <h5>📡 Live Tracking</h5>
            <p><strong>Latitude:</strong> @currentLat</p>
            <p><strong>Longitude:</strong> @currentLng</p>
            <p><strong>Points tracked:</strong> @gpsPoints.Count</p>
        </div>
    }
</div>

@code {
    private string? Username;
    private string? UserRole;
    private string? ErrorMessage;

    private const int CircuitID = 1;
    private int HeatID;

    private double currentLat;
    private double currentLng;
    private bool isTracking = false;
    private System.Timers.Timer gpsTimer;

    private List<GPSPointDTO> gpsPoints = new();
    private List<GPSPointDTO> currentLapPoints = new();
    private CircuitDTO? currentCircuit;
    private bool isInStartZone = false;
    private DateTime? lapStartTime = null;

    private List<GPSPointDTO> layoutRecording = new();
    private bool layoutRecordingActive = false;

    private bool sessionActive = false;
    private System.Timers.Timer? messageTimer;

    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "token")
                    ?? await JS.InvokeAsync<string>("sessionStorage.getItem", "token");

        if (string.IsNullOrEmpty(token) || IsTokenExpired(token))
        {
            Navigation.NavigateTo("/", true);
            return;
        }

        var payload = ParseJwtPayload(token);
        if (payload != null)
        {
            payload.TryGetValue("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress", out var email);
            payload.TryGetValue("http://schemas.microsoft.com/ws/2008/06/identity/claims/role", out var role);

            Username = email.GetString();
            UserRole = role.GetString();
        }
    }

    private async Task ToggleSession()
    {
        if (!sessionActive)
        {
            await StartSession();
            sessionActive = true;
        }
        else
        {
            await StopTracking();
            sessionActive = false;
            ErrorMessage = "🛑 Session stopped.";
        }
    }

    private async Task StartSession()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Post, "api/gps/start-session");
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");

            if (!string.IsNullOrWhiteSpace(token))
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var session = await response.Content.ReadFromJsonAsync<StartSessionResponse>();
                HeatID = session!.HeatID;

                if (UserRole != "Admin")
                    await StartTracking();
            }
            else
            {
                ErrorMessage = "Failed to start session.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    private async Task SetStartLine()
    {
        try
        {
            var location = await Geolocation.GetLocationAsync();

            var dto = new CircuitDTO
                {
                    Name = $"Circuit {DateTime.UtcNow:yyyy-MM-dd HH:mm}",
                    StartLineLat = location.Latitude,
                    StartLineLng = location.Longitude,
                    RadiusMeters = 3
                };

            var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");
            var request = new HttpRequestMessage(HttpMethod.Post, "api/circuits")
                {
                    Content = JsonContent.Create(dto)
                };
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var created = await response.Content.ReadFromJsonAsync<CircuitDTO>();
                currentCircuit = created;
                ErrorMessage = $"✅ Circuit created (ID: {created?.CircuitID})";
            }
            else
            {
                ErrorMessage = $"❌ Failed to create circuit: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"❌ Error: {ex.Message}";
        }
    }

    private async Task StartLayoutRecording()
    {
        await SetStartLine();
        layoutRecording.Clear();
        layoutRecordingActive = true;
        await StartTracking();
    }

    private async Task StartTracking()
    {
        var permissionStatus = await Permissions.RequestAsync<Permissions.LocationWhenInUse>();
        if (permissionStatus != PermissionStatus.Granted)
        {
            ErrorMessage = "❌ Location permission denied.";
            return;
        }

        gpsPoints.Clear();
        currentLapPoints.Clear();
        currentCircuit = await Http.GetFromJsonAsync<CircuitDTO>($"api/circuits/{CircuitID}");

        isTracking = true;
        gpsTimer = new System.Timers.Timer(100);
        gpsTimer.Elapsed += async (_, _) => await InvokeAsync(FetchGpsAsync);
        gpsTimer.AutoReset = true;
        gpsTimer.Start();
    }

    private Task StopTracking()
    {
        isTracking = false;
        gpsTimer?.Stop();
        gpsTimer?.Dispose();
        gpsTimer = null;
        return Task.CompletedTask;
    }

    private async Task FetchGpsAsync()
    {
        try
        {
            var location = await Geolocation.GetLocationAsync(new GeolocationRequest
                {
                    DesiredAccuracy = GeolocationAccuracy.Best,
                    Timeout = TimeSpan.FromSeconds(2)
                });

            if (location == null) return;

            currentLat = location.Latitude;
            currentLng = location.Longitude;

            var point = new GPSPointDTO
                {
                    Latitude = currentLat,
                    Longitude = currentLng,
                    Timestamp = DateTime.UtcNow
                };

            gpsPoints.Add(point);
            currentLapPoints.Add(point);

            if (currentCircuit == null) return;

            var distance = HaversineDistanceMeters(
                currentLat, currentLng,
                currentCircuit.StartLineLat, currentCircuit.StartLineLng);

            if (layoutRecordingActive)
            {
                layoutRecording.Add(point);
                var elapsed = (DateTime.UtcNow - layoutRecording.First().Timestamp).TotalSeconds;
                if (distance < currentCircuit.RadiusMeters && elapsed > 20)
                {
                    layoutRecordingActive = false;
                    StopTracking();
                    await SaveLayoutToApi();
                }
            }

            if (distance < currentCircuit.RadiusMeters)
            {
                if (!isInStartZone)
                {
                    isInStartZone = true;

                    if (lapStartTime == null)
                    {
                        lapStartTime = point.Timestamp;
                        currentLapPoints.Clear();
                        currentLapPoints.Add(point);
                    }
                    else
                    {
                        var end = point.Timestamp;
                        if ((end - lapStartTime.Value).TotalSeconds > 5)
                        {
                            await FinalizeAndSubmitLap(
                                lapStartTime.Value, end, currentLapPoints.ToList());
                            lapStartTime = point.Timestamp;
                            currentLapPoints.Clear();
                            currentLapPoints.Add(point);
                        }
                    }
                }
            }
            else
            {
                isInStartZone = false;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"📍 GPS error: {ex.Message}";
        }
    }

    private async Task SaveLayoutToApi()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "token")
                   ?? await JS.InvokeAsync<string>("sessionStorage.getItem", "token");

        var request = new HttpRequestMessage(HttpMethod.Post, $"api/circuits/{CircuitID}/layout")
            {
                Content = JsonContent.Create(layoutRecording)
            };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
            ErrorMessage = "✅ Circuit layout saved!";
        else
            ErrorMessage = $"❌ Failed to save layout: {response.StatusCode}";
    }

    private async Task FinalizeAndSubmitLap(DateTime start, DateTime end, List<GPSPointDTO> points)
    {
        var duration = (end - start).TotalMilliseconds;
        var thirds = duration / 3;

        var lap = new CreateLapTimeWithGPSRequest
            {
                HeatID = HeatID,
                LapNumber = 1, // could increment if needed
                StartTime = start,
                EndTime = end,
                GPSPoints = points,
                MiniSectors = new List<MiniSectorDTO>
            {
                new MiniSectorDTO { SectorNumber = 1, StartTime = start, EndTime = start.AddMilliseconds(thirds) },
                new MiniSectorDTO { SectorNumber = 2, StartTime = start.AddMilliseconds(thirds), EndTime = start.AddMilliseconds(2 * thirds) },
                new MiniSectorDTO { SectorNumber = 3, StartTime = start.AddMilliseconds(2 * thirds), EndTime = end }
            }
            };

        var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");

        var request = new HttpRequestMessage(HttpMethod.Post, "api/gps/lap")
            {
                Content = JsonContent.Create(lap)
            };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);

        if (!response.IsSuccessStatusCode)
        {
            ErrorMessage = $"❌ Lap submission failed: {response.StatusCode}";
            return;
        }

        ErrorMessage = $"✅ Lap submitted! Duration: {(end - start).TotalSeconds:F2}s";

        messageTimer?.Stop();
        messageTimer = new System.Timers.Timer(5000);
        messageTimer.Elapsed += (_, _) =>
        {
            ErrorMessage = null;
            InvokeAsync(StateHasChanged);
            messageTimer?.Stop();
        };
        messageTimer.Start();
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "token");
        await JS.InvokeVoidAsync("sessionStorage.removeItem", "token");
        Username = null;
        UserRole = null;
        Navigation.NavigateTo("/", true);
    }

    private bool IsTokenExpired(string jwt)
    {
        try
        {
            var parts = jwt.Split('.');
            var payload = parts[1] + new string('=', (4 - parts[1].Length % 4) % 4);
            var json = Encoding.UTF8.GetString(Convert.FromBase64String(payload));
            var data = JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(json);
            var exp = data?["exp"].GetInt64();
            return DateTime.UtcNow > DateTimeOffset.FromUnixTimeSeconds(exp!.Value).UtcDateTime;
        }
        catch
        {
            return true;
        }
    }

    private Dictionary<string, JsonElement>? ParseJwtPayload(string jwt)
    {
        try
        {
            var parts = jwt.Split('.');
            var payload = parts[1] + new string('=', (4 - parts[1].Length % 4) % 4);
            var json = Encoding.UTF8.GetString(Convert.FromBase64String(payload));
            return JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(json);
        }
        catch
        {
            return null;
        }
    }

    private double DegreesToRadians(double deg) => deg * (Math.PI / 180);

    private double HaversineDistanceMeters(double lat1, double lon1, double lat2, double lon2)
    {
        const double R = 6371000;
        var dLat = DegreesToRadians(lat2 - lat1);
        var dLon = DegreesToRadians(lon2 - lon1);

        var a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +
                Math.Cos(DegreesToRadians(lat1)) * Math.Cos(DegreesToRadians(lat2)) *
                Math.Sin(dLon / 2) * Math.Sin(dLon / 2);

        var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
        return R * c;
    }
}