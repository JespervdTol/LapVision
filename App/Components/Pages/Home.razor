@page "/home"
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject HttpClient Http
@using System.Text.Json
@using System.Net.Http.Headers
@using Contracts.DTO.GPS

<link href="css/home.css" rel="stylesheet" />

<div class="home-container">
    <h1>Welcome back, @Username!</h1>
    <p class="home-sub">You're logged in as <strong>@UserRole</strong></p>

    <button class="btn-start-session" @onclick="StartSession">Start Session</button>

    <button class="logout-button" @onclick="Logout">Logout</button>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3">@ErrorMessage</div>
    }
</div>

@code {
    private string? Username;
    private string? UserRole;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");
        if (string.IsNullOrEmpty(token))
            token = await JS.InvokeAsync<string>("sessionStorage.getItem", "token");

        if (string.IsNullOrEmpty(token) || IsTokenExpired(token))
        {
            Navigation.NavigateTo("/", true);
            return;
        }

        var payload = ParseJwtPayload(token);
        if (payload != null)
        {
            payload.TryGetValue("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress", out var email);
            payload.TryGetValue("http://schemas.microsoft.com/ws/2008/06/identity/claims/role", out var role);

            Username = email.ValueKind != JsonValueKind.Undefined ? email.GetString() : null;
            UserRole = role.ValueKind != JsonValueKind.Undefined ? role.GetString() : null;
        }
    }

    private async Task LogToken()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "token")
                   ?? await JS.InvokeAsync<string>("sessionStorage.getItem", "token");

        System.Diagnostics.Debug.WriteLine($"🪪 JWT Token: {token}");
    }

    private async Task StartSession()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Post, "api/gps/start-session");

            var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
            }

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var session = await response.Content.ReadFromJsonAsync<StartSessionResponse>();
                Navigation.NavigateTo($"/track?sessionId={session?.SessionID}&heatId={session?.HeatID}");
            }
            else
            {
                ErrorMessage = "Failed to start session.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "token");
        await JS.InvokeVoidAsync("sessionStorage.removeItem", "token");

        Username = null;
        UserRole = null;

        Navigation.NavigateTo("/", forceLoad: true);
    }

    private bool IsTokenExpired(string jwt)
    {
        try
        {
            var parts = jwt.Split('.');
            if (parts.Length != 3) return true;

            var payload = parts[1];
            payload += new string('=', (4 - payload.Length % 4) % 4);
            var bytes = Convert.FromBase64String(payload);
            var json = System.Text.Encoding.UTF8.GetString(bytes);
            var payloadDict = JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(json);

            if (payloadDict != null && payloadDict.TryGetValue("exp", out var expElement))
            {
                long unixExp = expElement.GetInt64();
                var expiration = DateTimeOffset.FromUnixTimeSeconds(unixExp).UtcDateTime;
                return DateTime.UtcNow > expiration;
            }

            return true;
        }
        catch
        {
            return true;
        }
    }

    private Dictionary<string, JsonElement>? ParseJwtPayload(string jwt)
    {
        try
        {
            var parts = jwt.Split('.');
            if (parts.Length != 3) return null;

            var payload = parts[1];
            payload += new string('=', (4 - payload.Length % 4) % 4);
            var bytes = Convert.FromBase64String(payload);
            var json = System.Text.Encoding.UTF8.GetString(bytes);
            return JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(json);
        }
        catch
        {
            return null;
        }
    }
}