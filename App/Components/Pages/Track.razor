@page "/track"
@using Contracts.DTO.GPS
@using Contracts.DTO.LapTime
@using Contracts.DTO.Circuit
@using Microsoft.Maui.ApplicationModel
@inject HttpClient Http
@inject IJSRuntime JS

<h3>🛰️ Live GPS Tracking</h3>

@if (!isTracking)
{
        <button class="btn btn-primary" @onclick="StartTracking">Start Tracking</button>
}
else
{
        <p>Tracking is <strong>ON</strong></p>
        <p><strong>Latitude:</strong> @currentLat</p>
        <p><strong>Longitude:</strong> @currentLng</p>
        <p><strong>Points tracked:</strong> @gpsPoints.Count</p>

        <button class="btn btn-danger mt-2" @onclick="StopTracking">Stop Tracking</button>
}

<button class="btn btn-outline-success mt-3" @onclick="SetStartLine">📌 Set Start/Finish Line (Current GPS)</button>

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
        <div class="alert alert-danger mt-3">@ErrorMessage</div>
}

<hr />
<button class="btn btn-success mt-2" @onclick="GenerateFirstLap">🏁 First Lap (Baseline)</button>
<button class="btn btn-info mt-2" @onclick="GenerateSecondLap">✅ Second Lap (Faster)</button>
<button class="btn btn-warning mt-2" @onclick="GenerateThirdLap">🐢 Third Lap (Slower)</button>
<button class="btn btn-primary mt-2" @onclick="GenerateFourthLap">🔥 Fourth Lap (Mixed)</button>

@code {
    private double currentLat;
    private double currentLng;
    private bool isTracking = false;
    private string? ErrorMessage;

    private List<GPSPointDTO> gpsPoints = new();
    private System.Timers.Timer gpsTimer;

    private const int HeatID = 1;
    private const int CircuitID = 1;
    private int currentLap = 1;

    private bool isInStartZone = false;
    private DateTime? lapStartTime = null;
    private List<GPSPointDTO> currentLapPoints = new();
    private CircuitDTO? currentCircuit;

    private async Task GenerateFirstLap()
    {
        await GenerateLap(new[] { 15000.0, 15000.0, 15000.0 });
    }

    private async Task GenerateSecondLap()
    {
        await GenerateLap(new[] { 14300.0, 14300.0, 14300.0 });
    }

    private async Task GenerateThirdLap()
    {
        await GenerateLap(new[] { 16000.0, 16000.0, 16000.0 });
    }

    private async Task GenerateFourthLap()
    {
        await GenerateLap(new[] { 14166.0, 14166.0, 17000.0 });
    }

    private async Task GenerateLap(double[] sectorDurationsMs)
    {
        var start = DateTime.UtcNow;
        var mid1 = start.AddMilliseconds(sectorDurationsMs[0]);
        var mid2 = mid1.AddMilliseconds(sectorDurationsMs[1]);
        var end = mid2.AddMilliseconds(sectorDurationsMs[2]);

        const int pointCount = 180;
        const double centerLat = 50.4371;
        const double centerLng = 5.9720;
        const double radiusDegrees = 0.0003;

        var totalMs = sectorDurationsMs.Sum();
        var interval = totalMs / pointCount;

        var points = new List<GPSPointDTO>();
        for (int i = 0; i < pointCount; i++)
        {
            double angle = 2 * Math.PI * i / pointCount;
            points.Add(new GPSPointDTO
                {
                    Latitude = centerLat + radiusDegrees * Math.Cos(angle),
                    Longitude = centerLng + radiusDegrees * Math.Sin(angle),
                    Timestamp = start.AddMilliseconds(i * interval)
                });
        }

        var lap = new CreateLapTimeWithGPSRequest
            {
                HeatID = HeatID,
                LapNumber = currentLap++,
                StartTime = start,
                EndTime = end,
                GPSPoints = points,
                MiniSectors = new List<MiniSectorDTO>
            {
                new MiniSectorDTO { SectorNumber = 1, StartTime = start, EndTime = mid1 },
                new MiniSectorDTO { SectorNumber = 2, StartTime = mid1, EndTime = mid2 },
                new MiniSectorDTO { SectorNumber = 3, StartTime = mid2, EndTime = end }
            }
            };

        await SubmitLapToApi(lap);
    }

    private async Task SubmitLapToApi(CreateLapTimeWithGPSRequest lap)
    {
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "token")
                      ?? await JS.InvokeAsync<string>("sessionStorage.getItem", "token");

            if (string.IsNullOrWhiteSpace(token))
            {
                ErrorMessage = "❌ Not logged in. Token missing.";
                return;
            }

            var request = new HttpRequestMessage(HttpMethod.Post, "api/gps/lap")
                {
                    Content = JsonContent.Create(lap)
                };

            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                System.Diagnostics.Debug.WriteLine("✅ Lap submitted!");
                ErrorMessage = null;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Lap submit failed: {response.StatusCode} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"HTTP error: {ex.Message}";
        }
    }

    private async Task StartTracking()
    {
        var permissionStatus = await Permissions.RequestAsync<Permissions.LocationWhenInUse>();
        if (permissionStatus != PermissionStatus.Granted)
        {
            ErrorMessage = "❌ Location permission was denied. Please allow GPS access.";
            return;
        }

        ErrorMessage = null;
        isTracking = true;
        gpsPoints.Clear();
        gpsTimer = new System.Timers.Timer(250);
        gpsTimer.Elapsed += async (_, _) => await InvokeAsync(FetchGpsAsync);
        gpsTimer.AutoReset = true;
        gpsTimer.Start();
    }

    private void StopTracking()
    {
        isTracking = false;
        gpsTimer?.Stop();
        gpsTimer?.Dispose();
    }

    private async Task FetchGpsAsync()
    {
        try
        {
            var location = await Geolocation.GetLocationAsync(new GeolocationRequest
                {
                    DesiredAccuracy = GeolocationAccuracy.Best,
                    Timeout = TimeSpan.FromSeconds(5)
                });

            if (location != null)
            {
                currentLat = location.Latitude;
                currentLng = location.Longitude;

                var point = new GPSPointDTO
                    {
                        Latitude = location.Latitude,
                        Longitude = location.Longitude,
                        Timestamp = DateTime.UtcNow
                    };

                gpsPoints.Add(point);
                currentLapPoints.Add(point);

                if (currentCircuit == null)
                {
                    currentCircuit = await Http.GetFromJsonAsync<CircuitDTO>($"api/circuits/{CircuitID}");
                }

                var distanceToStart = HaversineDistanceMeters(currentLat, currentLng, currentCircuit.StartLineLat, currentCircuit.StartLineLng);

                if (distanceToStart < currentCircuit.RadiusMeters)
                {
                    if (!isInStartZone)
                    {
                        isInStartZone = true;

                        if (lapStartTime == null)
                        {
                            lapStartTime = point.Timestamp;
                            currentLapPoints.Clear();
                            currentLapPoints.Add(point);
                            Console.WriteLine("🏁 Lap started!");
                        }
                        else
                        {
                            var start = lapStartTime.Value;
                            var end = point.Timestamp;

                            if ((end - start).TotalSeconds > 5)
                            {
                                await FinalizeAndSubmitLap(start, end, currentLapPoints.ToList());
                                lapStartTime = point.Timestamp;
                                currentLapPoints.Clear();
                                currentLapPoints.Add(point);
                            }
                        }
                    }
                }
                else
                {
                    isInStartZone = false;
                }

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"📍 GPS error: {ex.Message}";
        }
    }

    private async Task FinalizeAndSubmitLap(DateTime start, DateTime end, List<GPSPointDTO> points)
    {
        var duration = (end - start).TotalMilliseconds;
        var sectorDurations = new[] { duration / 3, duration / 3, duration / 3 };

        var lap = new CreateLapTimeWithGPSRequest
            {
                HeatID = HeatID,
                LapNumber = currentLap++,
                StartTime = start,
                EndTime = end,
                GPSPoints = points,
                MiniSectors = new List<MiniSectorDTO>
            {
                new MiniSectorDTO { SectorNumber = 1, StartTime = start, EndTime = start.AddMilliseconds(sectorDurations[0]) },
                new MiniSectorDTO { SectorNumber = 2, StartTime = start.AddMilliseconds(sectorDurations[0]), EndTime = start.AddMilliseconds(sectorDurations[0] + sectorDurations[1]) },
                new MiniSectorDTO { SectorNumber = 3, StartTime = start.AddMilliseconds(sectorDurations[0] + sectorDurations[1]), EndTime = end }
            }
            };

        await SubmitLapToApi(lap);
    }

    private async Task SetStartLine()
    {
        try
        {
            var location = await Geolocation.GetLocationAsync();
            var dto = new CircuitDTO
                {
                    CircuitID = CircuitID,
                    StartLineLat = location.Latitude,
                    StartLineLng = location.Longitude,
                    RadiusMeters = 5
                };

            var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");
            var request = new HttpRequestMessage(HttpMethod.Put, $"api/circuits/{CircuitID}")
                {
                    Content = JsonContent.Create(dto)
                };
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);
            ErrorMessage = response.IsSuccessStatusCode
                ? "✅ Start line set!"
                : $"❌ Failed to set start line: {response.StatusCode}";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"❌ Error: {ex.Message}";
        }
    }

    private double DegreesToRadians(double deg) => deg * (Math.PI / 180);

    private double HaversineDistanceMeters(double lat1, double lon1, double lat2, double lon2)
    {
        const double R = 6371000;
        var dLat = DegreesToRadians(lat2 - lat1);
        var dLon = DegreesToRadians(lon2 - lon1);

        var a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +
                Math.Cos(DegreesToRadians(lat1)) * Math.Cos(DegreesToRadians(lat2)) *
                Math.Sin(dLon / 2) * Math.Sin(dLon / 2);

        var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
        return R * c;
    }

    public void Dispose()
    {
        gpsTimer?.Dispose();
    }
}