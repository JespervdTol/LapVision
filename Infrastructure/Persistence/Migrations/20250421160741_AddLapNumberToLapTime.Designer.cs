// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250421160741_AddLapNumberToLapTime")]
    partial class AddLapNumberToLapTime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Model.Entities.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AccountID");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Circuit", b =>
                {
                    b.Property<int>("CircuitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CircuitID"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CircuitID");

                    b.ToTable("Circuit", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Heat", b =>
                {
                    b.Property<int>("HeatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("HeatID"));

                    b.Property<int>("HeatNumber")
                        .HasColumnType("int");

                    b.Property<int>("SessionID")
                        .HasColumnType("int");

                    b.HasKey("HeatID");

                    b.HasIndex("SessionID");

                    b.ToTable("Heat", (string)null);
                });

            modelBuilder.Entity("Model.Entities.LapTime", b =>
                {
                    b.Property<int>("LapTimeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LapTimeID"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HeatID")
                        .HasColumnType("int");

                    b.Property<int>("LapNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan?>("TotalTime")
                        .HasColumnType("time(6)");

                    b.HasKey("LapTimeID");

                    b.HasIndex("HeatID");

                    b.ToTable("LapTime", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PersonID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("longblob");

                    b.HasKey("PersonID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("Person", (string)null);

                    b.HasDiscriminator<string>("PersonType").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Model.Entities.Session", b =>
                {
                    b.Property<int>("SessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SessionID"));

                    b.Property<int>("CircuitID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SessionID");

                    b.HasIndex("CircuitID");

                    b.ToTable("Session", (string)null);
                });

            modelBuilder.Entity("Model.Entities.Coach", b =>
                {
                    b.HasBaseType("Model.Entities.Person");

                    b.HasDiscriminator().HasValue("Coach");
                });

            modelBuilder.Entity("Model.Entities.Driver", b =>
                {
                    b.HasBaseType("Model.Entities.Person");

                    b.HasDiscriminator().HasValue("Driver");
                });

            modelBuilder.Entity("Model.Entities.Heat", b =>
                {
                    b.HasOne("Model.Entities.Session", "Session")
                        .WithMany("Heats")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Model.Entities.LapTime", b =>
                {
                    b.HasOne("Model.Entities.Heat", "Heat")
                        .WithMany("LapTimes")
                        .HasForeignKey("HeatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Heat");
                });

            modelBuilder.Entity("Model.Entities.Person", b =>
                {
                    b.HasOne("Model.Entities.Account", "Account")
                        .WithOne("Person")
                        .HasForeignKey("Model.Entities.Person", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Model.Entities.Session", b =>
                {
                    b.HasOne("Model.Entities.Circuit", "Circuit")
                        .WithMany()
                        .HasForeignKey("CircuitID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Circuit");
                });

            modelBuilder.Entity("Model.Entities.Account", b =>
                {
                    b.Navigation("Person")
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Heat", b =>
                {
                    b.Navigation("LapTimes");
                });

            modelBuilder.Entity("Model.Entities.Session", b =>
                {
                    b.Navigation("Heats");
                });
#pragma warning restore 612, 618
        }
    }
}
